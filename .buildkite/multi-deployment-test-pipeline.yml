steps:
  # Test 1: Elastic CI Stack Agent (Native EC2 with EKS access) - Pre-installed tools
  - label: "üöÄ Deploy with Elastic CI Stack (Pre-installed Helm)"
    key: "elastic-ci-test"
    agents:
      queue: "default"
    command: |
      # Configure kubectl for EKS cluster using IAM role authentication
      aws eks update-kubeconfig --region us-east-1 --name ola-bk-test
      
      # Verify pre-installed tools are available
      echo "‚úÖ Verifying pre-installed tools..."
      helm version
      kubectl version --client
      kubectl get nodes
      
      # Deploy using pre-installed Helm
      helm upgrade --install test-elastic-native oci://registry-1.docker.io/bitnamicharts/nginx \
        --namespace plugin \
        --set service.type=ClusterIP \
        --timeout 100s \
        --wait \
        --atomic
      
      # Verify deployment
      kubectl get pods -l app.kubernetes.io/name=nginx
      kubectl get svc test-elastic-native-nginx

  # Test 2: Docker Plugin (Single container execution with EKS access)
  - label: "üê≥ Test 2: Docker Plugin + Helm Chart"
    key: "docker-plugin-test"
    depends_on: "elastic-ci-test"
    agents:
      queue: "default"
    command: |
      # Install AWS CLI to /tmp (writable location)
      curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      unzip awscliv2.zip
      ./aws/install --bin-dir /tmp/aws-cli --install-dir /tmp/aws-cli-install
      export PATH="/tmp/aws-cli:$PATH"
      
      # Configure kubectl for EKS cluster using IAM role authentication
      aws eks update-kubeconfig --region us-east-1 --name ola-bk-test
    plugins:
      - docker#v5.11.0:
          image: "dtzar/helm-kubectl:latest"
          propagate-environment: true
      - https://github.com/mykematt/deployment-helm-chart-buildkite-plugin.git#main:
          mode: deploy
          chart: "oci://registry-1.docker.io/bitnamicharts/nginx"
          release: "docker-plugin-nginx"
          namespace: plugin
          set:
            - service.type=ClusterIP
          timeout: "100s"
          wait: true
          atomic: true
          create_namespace: true

  # Test 3: Docker Compose Plugin (Multi-container execution with EKS access)
  - label: "üêô Test 3: Docker Compose Plugin + Helm Chart"
    key: "docker-compose-test"
    depends_on: "docker-plugin-test"
    agents:
      queue: "default"
    command: |
      # Install AWS CLI to /tmp (writable location)
      curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      unzip awscliv2.zip
      ./aws/install --bin-dir /tmp/aws-cli --install-dir /tmp/aws-cli-install
      export PATH="/tmp/aws-cli:$PATH"
      
      # Configure kubectl for EKS cluster using IAM role authentication
      aws eks update-kubeconfig --region us-east-1 --name ola-bk-test
    plugins:
      - docker-compose#v4.16.0:
          run: helm-deployer
          propagate-environment: true
      - https://github.com/mykematt/deployment-helm-chart-buildkite-plugin.git#main:
          mode: deploy
          chart: "oci://registry-1.docker.io/bitnamicharts/nginx"
          release: "compose-plugin-nginx"
          namespace: plugin
          set:
            - service.type=ClusterIP
          timeout: "100s"
          wait: true
          atomic: true
          create_namespace: true

  # Verification Step
  - label: "‚úÖ Verify All Deployments"
    key: "verify-all"
    depends_on: "docker-compose-test"
    agents:
      queue: kubernetes
    plugins:
      - kubernetes:
          podSpec:
            serviceAccountName: deployer-manager
            containers:
            - image: dtzar/helm-kubectl:latest
              name: helm-kubectl
    command: |
      echo "üîç Verifying all deployments..."
      helm list -n plugin
      echo ""
      echo "üìä Deployment Status:"
      kubectl get deployments -n plugin
      echo ""
      echo "üéØ All 3 deployment methods tested successfully!"

  # Cleanup Block
  - block: "üßπ Clean up test deployments?"
    key: "cleanup-block"
    depends_on: "verify-all"

  # Cleanup Step
  - label: "üßπ Cleanup All Test Deployments"
    key: "cleanup-all"
    depends_on: "cleanup-block"
    agents:
      queue: kubernetes
    plugins:
      - kubernetes:
          podSpec:
            serviceAccountName: deployer-manager
            containers:
            - image: dtzar/helm-kubectl:latest
              name: helm-kubectl
    command: |
      echo "üßπ Cleaning up test deployments..."
      helm uninstall elastic-ci-nginx -n plugin || true
      helm uninstall docker-plugin-apache -n plugin || true
      helm uninstall compose-plugin-nginx -n plugin || true
      echo "‚úÖ Cleanup complete!"
